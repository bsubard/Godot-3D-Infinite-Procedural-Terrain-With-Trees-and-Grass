[gd_scene load_steps=45 format=3 uid="uid://cwhpy8mwx2xao"]

[ext_resource type="Script" uid="uid://hqloy5qy3o61" path="res://Chunk.gd" id="1_lexys"]
[ext_resource type="Shader" uid="uid://bwosdgwpjqfgo" path="res://grass.gdshader" id="2_r8y4k"]
[ext_resource type="Shader" uid="uid://bpwnc8pfgalf5" path="res://Chunk.gdshader" id="2_s3wkh"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_lexys"]
seed = 35
frequency = 0.0041

[sub_resource type="FastNoiseLite" id="FastNoiseLite_s3wkh"]
seed = 90
frequency = 0.0036

[sub_resource type="FastNoiseLite" id="FastNoiseLite_r8y4k"]
seed = 57

[sub_resource type="FastNoiseLite" id="FastNoiseLite_fbyps"]
seed = 65

[sub_resource type="Gradient" id="Gradient_uym3e"]
colors = PackedColorArray(0, 0.289453, 0.146689, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_qtmie"]
gradient = SubResource("Gradient_uym3e")
fill_from = Vector2(0, 1)
fill_to = Vector2(0, 0)

[sub_resource type="Gradient" id="Gradient_j2u7c"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_dw44g"]
seed = 1
frequency = 0.0008

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_7cxre"]
seamless = true
color_ramp = SubResource("Gradient_j2u7c")
noise = SubResource("FastNoiseLite_dw44g")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_fbyps"]
render_priority = 0
shader = ExtResource("2_r8y4k")
shader_parameter/camera_fade_start = 39.271
shader_parameter/camera_fade_length = 25.0
shader_parameter/albedo = Color(2.59906e-06, 0.480451, 0.275322, 1)
shader_parameter/texture_albedo = SubResource("GradientTexture2D_qtmie")
shader_parameter/alpha_hash_scale = 0.0
shader_parameter/wind_noise = SubResource("NoiseTexture2D_7cxre")
shader_parameter/wind_direction = Vector2(2, 1.4)
shader_parameter/wind_speed = 0.05
shader_parameter/wind_strength = 0.8
shader_parameter/wind_scale = 0.005

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_r8y4k"]
cull_mode = 2
albedo_color = Color(0.337441, 0.1631, 0.000347769, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_fbyps"]
cull_mode = 2
albedo_color = Color(0, 0.557941, 0.315038, 1)

[sub_resource type="Gradient" id="Gradient_r8y4k"]
colors = PackedColorArray(3.73013e-07, 0.321645, 0.124654, 1, 1.05286e-07, 0.23307, 0.054501, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_j2u7c"]
frequency = 0.0388

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_uym3e"]
seamless = true
color_ramp = SubResource("Gradient_r8y4k")
noise = SubResource("FastNoiseLite_j2u7c")

[sub_resource type="Gradient" id="Gradient_fbyps"]
colors = PackedColorArray(0.664117, 0.617495, 0.517728, 1, 0.670947, 0.601144, 0.4006, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_uym3e"]
frequency = 0.0449

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_qtmie"]
seamless = true
color_ramp = SubResource("Gradient_fbyps")
noise = SubResource("FastNoiseLite_uym3e")

[sub_resource type="Gradient" id="Gradient_dw44g"]
colors = PackedColorArray(0.41598, 0.41598, 0.41598, 1, 0.355314, 0.355314, 0.355314, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_7cxre"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_05o6f"]
seamless = true
color_ramp = SubResource("Gradient_dw44g")
noise = SubResource("FastNoiseLite_7cxre")

[sub_resource type="Gradient" id="Gradient_s3wkh"]
colors = PackedColorArray(0.808998, 0.808998, 0.808998, 1, 1, 1, 1, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_811cv"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_j2u7c"]
seamless = true
color_ramp = SubResource("Gradient_s3wkh")
noise = SubResource("FastNoiseLite_811cv")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_r8y4k"]
render_priority = 0
shader = ExtResource("2_s3wkh")
shader_parameter/albedo_tint = Color(1, 1, 1, 1)
shader_parameter/texture_albedo_snow = SubResource("NoiseTexture2D_j2u7c")
shader_parameter/texture_albedo_grass = SubResource("NoiseTexture2D_uym3e")
shader_parameter/texture_albedo_sand = SubResource("NoiseTexture2D_qtmie")
shader_parameter/texture_albedo_slope = SubResource("NoiseTexture2D_05o6f")
shader_parameter/snow_start_height = 80.0
shader_parameter/snow_full_height = 100.0
shader_parameter/sand_start_height = 9.5e-06
shader_parameter/sand_full_height = -9.99999
shader_parameter/slope_threshold = 0.7
shader_parameter/slope_blend_range = 0.2
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/world_uv_scale = 0.1

[sub_resource type="Shader" id="Shader_r8y4k"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_burley, specular_schlick_ggx;

// Your original material properties
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);
uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;
uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);
uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

// New transparency and foam properties
uniform sampler2D DEPTH_TEXTURE : hint_depth_texture, repeat_disable, filter_nearest; 
uniform float depth_fade_distance : hint_range(0.0, 10.0) = 1.0;
uniform float absorbance : hint_range(0.0, 10.0) = 2.0;
uniform vec3 shallow_color : source_color = vec3(0.22, 0.66, 1.0);
uniform vec3 deep_color : source_color = vec3(0.0, 0.25, 0.45);
uniform float foam_amount : hint_range(0.0, 2.0) = 0.2;
uniform vec3 foam_color : source_color = vec3(1);
uniform sampler2D foam_noise : hint_default_white;

// Wave properties
uniform sampler2D wave_texture;
uniform float wave_scale = 4.0;
uniform float height_scale = 0.15;
uniform float wave_speed : hint_range(0.0, 0.2) = 0.015;

varying float wave_height;
varying vec3 uv_world_pos;

vec3 screen(vec3 base, vec3 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	
	// Vertex displacement for waves
	uv_world_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	wave_height = texture(wave_texture, uv_world_pos.xz / wave_scale + TIME * wave_speed*0.2).r;
	VERTEX.y += wave_height * height_scale;
}

void fragment() {
	vec2 base_uv = UV;
	
	// YOUR ANIMATED LAYERS SYSTEM (keeping this!)
	// Create multiple moving layers with different speeds and directions
	vec2 uv1 = base_uv + TIME * vec2(0.01, 0.005);
	vec2 uv2 = base_uv + TIME * vec2(-0.008, 0.012);
	vec2 uv3 = base_uv + TIME * vec2(0.006, -0.009);
	
	// Sample multiple times and blend
	vec3 normal1 = texture(texture_normal, uv1).rgb;
	vec3 normal2 = texture(texture_normal, uv2).rgb;
	vec3 normal3 = texture(texture_normal, uv3).rgb;
	
	// Blend the normals (convert from [0,1] to [-1,1] range first)
	normal1 = normal1 * 2.0 - 1.0;
	normal2 = normal2 * 2.0 - 1.0;
	normal3 = normal3 * 2.0 - 1.0;
	
	vec3 blended_normal = normalize(normal1 + normal2 * 0.5 + normal3 * 0.3);
	vec3 final_normal = blended_normal * 0.5 + 0.5; // Convert back to [0,1]
	
	// Do the same for albedo
	vec4 albedo1 = texture(texture_albedo, uv1);
	vec4 albedo2 = texture(texture_albedo, uv2);
	vec3 blended_albedo = mix(albedo1.rgb, albedo2.rgb, 0.5);
	
	// Your original material properties
	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	
	// NEW TRANSPARENCY AND FOAM SYSTEM
	// Depth texture magic
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV, 0.0).r;
  	vec3 ndc = vec3(SCREEN_UV * 2.0 - 1.0, depth);
	vec4 world = INV_VIEW_MATRIX * INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
	float depth_texture_y = world.y / world.w;
	float vertex_y = (INV_VIEW_MATRIX * vec4(VERTEX, 1.0)).y;
	float vertical_depth = vertex_y - depth_texture_y;
	
	// Changes the color of geometry behind it as the water gets deeper
	float depth_fade_blend = exp(-vertical_depth / depth_fade_distance);
	depth_fade_blend = clamp(depth_fade_blend, 0.0, 1.0);
	
	// Makes the water more transparent as it gets more shallow
	float alpha_blend = -vertical_depth * absorbance;
	alpha_blend = clamp(1.0 - exp(alpha_blend), 0.0, 1.0);
	
	// Small layer of foam
	float foam_blend = clamp(1.0 - (vertical_depth / foam_amount), 0.0, 1.0);
	vec3 foam = foam_blend * foam_color;
	
	// COMBINE EVERYTHING
	// Mix water depth colors
	vec3 water_color = mix(deep_color, shallow_color, depth_fade_blend);
	// Add foam
	water_color = screen(water_color, foam);
	// Blend with your animated albedo texture
	vec3 final_albedo = mix(water_color, albedo.rgb * blended_albedo, 0.3); // Adjust 0.3 to control texture visibility
	
	// Set final outputs
	if (FRONT_FACING) {
		ALPHA = alpha_blend; // Use calculated alpha for front faces
	} else {
		ALPHA = 1.0;
	}
	
	ALBEDO = final_albedo;
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;
	ROUGHNESS = roughness_tex * roughness;
	NORMAL_MAP = final_normal;
	NORMAL_MAP_DEPTH = normal_scale;
}"

[sub_resource type="Gradient" id="Gradient_05o6f"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_beg16"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_x4yda"]
color_ramp = SubResource("Gradient_05o6f")
noise = SubResource("FastNoiseLite_beg16")

[sub_resource type="Gradient" id="Gradient_qtmie"]
colors = PackedColorArray(0.753984, 0.753984, 0.753984, 1, 1, 1, 1, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_05o6f"]
frequency = 0.1307

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ni86q"]
seamless = true
color_ramp = SubResource("Gradient_qtmie")
noise = SubResource("FastNoiseLite_05o6f")

[sub_resource type="Gradient" id="Gradient_811cv"]
colors = PackedColorArray(0.625597, 0.625597, 0.625597, 1, 1, 1, 1, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_qtmie"]
frequency = 0.1455

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_dw44g"]
seamless = true
as_normal_map = true
color_ramp = SubResource("Gradient_811cv")
noise = SubResource("FastNoiseLite_qtmie")

[sub_resource type="Gradient" id="Gradient_7cxre"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_ni86q"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_beg16"]
color_ramp = SubResource("Gradient_7cxre")
noise = SubResource("FastNoiseLite_ni86q")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_811cv"]
render_priority = 0
shader = SubResource("Shader_r8y4k")
shader_parameter/albedo = Color(0.1678, 0.478156, 0.771222, 1)
shader_parameter/texture_albedo = SubResource("NoiseTexture2D_ni86q")
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.15
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_normal = SubResource("NoiseTexture2D_dw44g")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_scale = Vector3(2.78, 2.78, 2.78)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/depth_fade_distance = 1.0
shader_parameter/absorbance = 2.0
shader_parameter/shallow_color = Color(0.22, 0.66, 1, 1)
shader_parameter/deep_color = Color(0, 0.25, 0.45, 1)
shader_parameter/foam_amount = 0.4
shader_parameter/foam_color = Color(0.560955, 0.560955, 0.560955, 1)
shader_parameter/foam_noise = SubResource("NoiseTexture2D_x4yda")
shader_parameter/wave_texture = SubResource("NoiseTexture2D_beg16")
shader_parameter/wave_scale = 4.0
shader_parameter/height_scale = 0.5
shader_parameter/wave_speed = 0.015

[sub_resource type="MultiMesh" id="MultiMesh_s3wkh"]

[sub_resource type="MultiMesh" id="MultiMesh_811cv"]

[node name="Chunk" type="Node3D" node_paths=PackedStringArray("mesh_instance", "collision_shape", "water_mesh_instance", "grass_multimesh", "tree_multimesh")]
script = ExtResource("1_lexys")
mesh_instance = NodePath("MeshInstance3D")
collision_shape = NodePath("StaticBody3D/CollisionShape3D")
water_mesh_instance = NodePath("MeshInstance3D2")
grass_multimesh = NodePath("MultiMeshInstance3D")
tree_multimesh = NodePath("MultiMeshInstance3D2")
noise_continent = SubResource("FastNoiseLite_lexys")
noise_mountain = SubResource("FastNoiseLite_s3wkh")
mountain_scale = 88.0
mountain_start_height = 5.0
noise_valley = SubResource("FastNoiseLite_r8y4k")
noise_erosion = SubResource("FastNoiseLite_fbyps")
grass_material = SubResource("ShaderMaterial_fbyps")
grass_min_height = -1.0
grass_max_height = 25.0
grass_density = 0.6
grass_rotation_min_degrees = Vector3(60, 0, -10)
grass_rotation_max_degrees = Vector3(120, 360, 10)
grass_scale_min = 2.0
grass_scale_max = 2.5
tree_trunk_material = SubResource("StandardMaterial3D_r8y4k")
tree_leaves_material = SubResource("StandardMaterial3D_fbyps")
tree_min_height = 1.0
tree_max_height = 25.0
tree_scale_min = 1.2
tree_scale_max = 2.0
overall_scale = 2.0

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_r8y4k")

[node name="StaticBody3D" type="StaticBody3D" parent="."]

[node name="CollisionShape3D" type="CollisionShape3D" parent="StaticBody3D"]

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_811cv")

[node name="MultiMeshInstance3D" type="MultiMeshInstance3D" parent="."]
cast_shadow = 0
multimesh = SubResource("MultiMesh_s3wkh")

[node name="MultiMeshInstance3D2" type="MultiMeshInstance3D" parent="."]
multimesh = SubResource("MultiMesh_811cv")
